#!/usr/bin/env python

# Before generation starts, generate overview page of microgreens and a page for each plant

import json
from os import environ, makedirs, listdir
from os.path import join, isdir, basename, splitext, isfile
import codecs
from shutil import rmtree
import Image

featured_image_dimensions = (100,200)
thumbnail_image_dimensions = (50,100)


def figure(url, width, height, alt, link):

	return '''

.. figure:: %s
   :height: %spx
   :width: %spx
   :alt: %s
   :target: %s
''' % (
	url,
	height,
	width,
	alt,
	link
	)



def write_file(file_path, content):
	with codecs.open(file_path, 'w', encoding='utf-8') as outfile:
		outfile.write(content)


def create_pagegen_directories(source_dir, products):
	''' Create directory for each product category '''

	for key, product_category in products.iteritems():
		product_directory = join(source_dir, product_category['pagegen_directory_name'])

		# Remove dir if exists
		if isdir(product_directory):
			rmtree(product_directory)

		makedirs(product_directory)


def create_pagegen_default_page(product_category):
	''' Create overview page for product category '''

	# Condider getting this from Pagegen environment..
	pagegen_default_page = 'index.html'

	default_page_path = join(environ['PAGEGEN_SOURCE_DIR'], product_category['pagegen_directory_name'], pagegen_default_page)

	rst = '''Title: %s

%s

''' % (product_category['title'], product_category['description'])

	rst += '.. raw:: html\n'

	for handle, item in sorted(product_category['items'].iteritems(), key=lambda (k,v): (v,k)):
		page_url = '%s/%s/%s' % (environ['PAGEGEN_BASE_URL'],  product_category['url_part'], '%s.html' % handle)

 		rst += '\n  <div><a href="%s"><img src="%s/include/product-photos/%s_thumbnail.jpg" alt="%s" /><h4>%s</h4></a></div>' % (page_url, environ['PAGEGEN_BASE_URL'], handle, item['name'], item['name'])

	rst += '\n\n'

	write_file(default_page_path, rst)


def resize_and_crop(img_path, modified_path, size, crop_type='top'):
	"""
	Resize and crop an image to fit the specified size.
	args:
	img_path: path for the image to resize.
	modified_path: path to store the modified image.
	size: `(width, height)` tuple.
	crop_type: can be 'top', 'middle' or 'bottom', depending on this
		value, the image will cropped getting the 'top/left', 'midle' or
		'bottom/rigth' of the image to fit the size.
	raises:
	Exception: if can not open the file in img_path of there is problems
		to save the image.
	ValueError: if an invalid `crop_type` is provided.
	"""
	# If height is higher we resize vertically, if not we resize horizontally
	img = Image.open(img_path)
	# Get current and desired ratio for the images
	img_ratio = img.size[0] / float(img.size[1])
	ratio = size[0] / float(size[1])
	#The image is scaled/cropped vertically or horizontally depending on the ratio
	if ratio > img_ratio:
		img = img.resize((size[0], size[0] * img.size[1] / img.size[0]),
		Image.ANTIALIAS)
		# Crop in the top, middle or bottom
		if crop_type == 'top':
			box = (0, 0, img.size[0], size[1])
		elif crop_type == 'middle':
			box = (0, (img.size[1] - size[1]) / 2, img.size[0], (img.size[1] + size[1]) / 2)
		elif crop_type == 'bottom':
			box = (0, img.size[1] - size[1], img.size[0], img.size[1])
		else :
			raise ValueError('ERROR: invalid value for crop_type')
		img = img.crop(box)
	elif ratio < img_ratio:
		img = img.resize((size[1] * img.size[0] / img.size[1], size[1]), Image.ANTIALIAS)
		# Crop in the top, middle or bottom
		if crop_type == 'top':
			box = (0, 0, size[0], img.size[1])
		elif crop_type == 'middle':
			box = ((img.size[0] - size[0]) / 2, 0, (img.size[0] + size[0]) / 2, img.size[1])
		elif crop_type == 'bottom':
			box = (img.size[0] - size[0], 0, img.size[0], img.size[1])
		else :
			raise ValueError('ERROR: invalid value for crop_type')
		img = img.crop(box)
	else :
		img = img.resize((size[0], size[1]), Image.ANTIALIAS)
	# If the scale is the same, we do not need to crop
	img.save(modified_path)


def cropped_images(handle):
	''' Make apprpriate versions of image '''

	image_dir = join(environ['PAGEGEN_SITE_DIR'], 'include', 'product-photos')
	source_image_path = join(image_dir, '%s.jpg' % handle)

	global featured_image_dimensions
	global thumbnail_image_dimensions

	if isfile(source_image_path):

		images = [ 
			{
				"cropped_path": join(image_dir, '%s_featured.jpg' % handle),
				"width-height": featured_image_dimensions
			},
			{
				"cropped_path": join(image_dir, '%s_thumbnail.jpg' % handle),
				"width-height": thumbnail_image_dimensions
			}
		]

		for i in images:
			if not isfile(i['cropped_path']):
				resize_and_crop(source_image_path, i['cropped_path'], i['width-height'], crop_type='middle')
	else:
		print('WARNING: No image for %s' % source_image_path)


def create_pagegen_product_pages(page_path, product, handle):

	rst = '''Title: %s
Menu exclude: True
Description: %s

%s

.. raw:: html

  <img src="%s/include/product-photos/%s_featured.jpg" alt="%s" />

''' % (
		product['name'],
		product['short_description'],
		product['description'],
		environ['PAGEGEN_BASE_URL'],
		handle,
		handle
	)

	write_file(page_path, rst)


# Load products
products_file_path = join(environ['PAGEGEN_SITE_DIR'], 'products.json')
with codecs.open(products_file_path, 'r', encoding='utf-8') as products:
	p = json.load(products)

# Create product directories
create_pagegen_directories(environ['PAGEGEN_SOURCE_DIR'], p)

# Create default page and pages for each product
for key, product_category in p.iteritems():
	for handle, item in product_category['items'].iteritems():
		cropped_images(handle)

	create_pagegen_default_page(product_category)

	for handle, item in product_category['items'].iteritems():
		page_path = join(environ['PAGEGEN_SOURCE_DIR'], product_category['pagegen_directory_name'], handle)

		create_pagegen_product_pages(page_path, item, handle)
