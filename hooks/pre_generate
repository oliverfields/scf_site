#!/usr/bin/env python

# Before generation starts, generate overview page of microgreens and a page for each plant

import json
from os import environ, makedirs, listdir
from os.path import join, isdir, basename, splitext, isfile, getmtime
import codecs
from shutil import rmtree
import Image
from operator import itemgetter


featured_image_dimensions = (400,200)
thumbnail_image_dimensions = (50,100)

def figure(url, width, height, alt, link):

	return '''

.. figure:: %s
   :height: %spx
   :width: %spx
   :alt: %s
   :target: %s
''' % (
	url,
	height,
	width,
	alt,
	link
	)



def write_file(file_path, content):
	with codecs.open(file_path, 'w', encoding='utf-8') as outfile:
		outfile.write(content)


def create_pagegen_directories(source_dir, products):
	''' Create directory for each product category '''

	for key, product_category in products.iteritems():
		product_directory = join(source_dir, product_category['pagegen_directory_name'])

		# Remove dir if exists
		if isdir(product_directory):
			rmtree(product_directory)

		makedirs(product_directory)


def get_image_url(image_src, handle):
		if isfile(image_src):
			return '%s/include/product-photos/%s_featured.jpg' % (environ['PAGEGEN_BASE_URL'], handle)

		return '%s/include/product-photos/photo-missing_featured.jpg' % (environ['PAGEGEN_BASE_URL'])


def create_pagegen_default_page(product_category):
	''' Create overview page for product category '''

	pagegen_default_page = 'index.html'

	if environ['PAGEGEN_ENVIRONMENT'] == 'prod':
		url_file_extension = '';
	else:
		url_file_extension = '.html';

	default_page_path = join(environ['PAGEGEN_SOURCE_DIR'], product_category['pagegen_directory_name'], pagegen_default_page)

	rst = '''##########################################
%s
##########################################

%s

''' % (product_category['title'], product_category['description'])

	product_boxes = ''
	for handle, item in sorted(product_category['items'].items(), key=itemgetter(0)):
		page_url = '%s/%s/%s' % (environ['PAGEGEN_BASE_URL'],  product_category['url_part'], '%s%s' % (handle, url_file_extension))

		img_src = '%s/include/product-photos/%s_featured.jpg' % (environ['PAGEGEN_SITE_DIR'], handle)

		img_url = get_image_url(img_src, handle)

		link = '%s/%s/%s%s' % (environ['PAGEGEN_BASE_URL'], product_category['url_part'], handle, url_file_extension)

		#product_boxes += '''\n  											<div class="4u 12u(mobile)">
		#										<section class="simpleCart_shelfItem box">
		#											<a href="%s" class="image featured"><img src="%s" alt="%s" /></a>
		#											<header>
		#												<h3 class="item_name">%s</h3>
		#											</header>
		#											<p class="description">%s<br /><br />%s</p>
		#											<div class="price"><span class="item_price">%s</span>kr per brett</div>
		#											<input type="button" class="item_add button" value="Legg i handlekurv" />
		#										</section>
		#									</div>''' % (link, img_src, item['name'], item['name'], item['short_description'], item['description'], item['flat_price'])

		product_boxes += '''\n  											<div class="4u 12u(mobile)">
  												<section class="simpleCart_shelfItem box">
  													<a href="%s" class="image featured"><img src="%s" alt="%s" /></a>
  													<header>
  														<h3 class="item_name">%s</h3>
  													</header>
  												</section>
  											</div>''' % (page_url, img_url, item['name'], item['name'])


	rst += '''

.. raw:: html

  			<!-- Main -->
  				<div id="main-wrapper">
  					<div class="container">
  						<div class="row">
  							<div class="12u">
  
  								<!-- Products -->
  									<section>
  										<div class="row">%s</div>
  									</section>
  							</div>
  						</div>
  					</div>
  				</div>
  
''' % product_boxes

	write_file(default_page_path, rst)


def resize_and_crop(img_path, modified_path, size, crop_type='top'):
	"""
	Resize and crop an image to fit the specified size.
	args:
	img_path: path for the image to resize.
	modified_path: path to store the modified image.
	size: `(width, height)` tuple.
	crop_type: can be 'top', 'middle' or 'bottom', depending on this
		value, the image will cropped getting the 'top/left', 'midle' or
		'bottom/rigth' of the image to fit the size.
	raises:
	Exception: if can not open the file in img_path of there is problems
		to save the image.
	ValueError: if an invalid `crop_type` is provided.
	"""
	# If height is higher we resize vertically, if not we resize horizontally
	img = Image.open(img_path)
	# Get current and desired ratio for the images
	img_ratio = img.size[0] / float(img.size[1])
	ratio = size[0] / float(size[1])
	#The image is scaled/cropped vertically or horizontally depending on the ratio
	if ratio > img_ratio:
		img = img.resize((size[0], size[0] * img.size[1] / img.size[0]),
		Image.ANTIALIAS)
		# Crop in the top, middle or bottom
		if crop_type == 'top':
			box = (0, 0, img.size[0], size[1])
		elif crop_type == 'middle':
			box = (0, (img.size[1] - size[1]) / 2, img.size[0], (img.size[1] + size[1]) / 2)
		elif crop_type == 'bottom':
			box = (0, img.size[1] - size[1], img.size[0], img.size[1])
		else :
			raise ValueError('ERROR: invalid value for crop_type')
		img = img.crop(box)
	elif ratio < img_ratio:
		img = img.resize((size[1] * img.size[0] / img.size[1], size[1]), Image.ANTIALIAS)
		# Crop in the top, middle or bottom
		if crop_type == 'top':
			box = (0, 0, size[0], img.size[1])
		elif crop_type == 'middle':
			box = ((img.size[0] - size[0]) / 2, 0, (img.size[0] + size[0]) / 2, img.size[1])
		elif crop_type == 'bottom':
			box = (img.size[0] - size[0], 0, img.size[0], img.size[1])
		else :
			raise ValueError('ERROR: invalid value for crop_type')
		img = img.crop(box)
	else :
		img = img.resize((size[0], size[1]), Image.ANTIALIAS)
	# If the scale is the same, we do not need to crop
	img.save(modified_path)


def image_size_match(img_path, size):
	try:
		img = Image.open(img_path)
	except Exception as e:
		print('Unable to work out size for %s: %s' % (img_path, e))
		return False

	if img.size == size:
		return True

	return False


def cropped_images(handle):
	''' Make apprpriate versions of image '''

	image_dir = join(environ['PAGEGEN_SITE_DIR'], 'include', 'product-photos')
	source_image_path = join(image_dir, '%s.jpg' % handle)

	global featured_image_dimensions
	global thumbnail_image_dimensions

	if isfile(source_image_path):

		images = [ 
			{
				"cropped_path": join(image_dir, '%s_featured.jpg' % handle),
				"width-height": featured_image_dimensions
			},
			{
				"cropped_path": join(image_dir, '%s_thumbnail.jpg' % handle),
				"width-height": thumbnail_image_dimensions
			}
		]

		for i in images:
			resize = False
			# If target not exist -> resize
			if isfile(i['cropped_path']) == False:
				resize = True
			else:
				# If source newer than target -> resize
				if getmtime(source_image_path) > getmtime(i['cropped_path']):
					resize = True

				# If size mismatch -> resize
				if image_size_match(i['cropped_path'], i['width-height']) == False:
					resize = True

			if resize:
				print "Resizing %s" % i['cropped_path']
				resize_and_crop(source_image_path, i['cropped_path'], i['width-height'], crop_type='middle')
	else:
		print('WARNING: No image for %s' % source_image_path)


def create_pagegen_product_pages(page_path, product, handle):

	img_src = '%s/include/product-photos/%s_featured.jpg' % (environ['PAGEGEN_SITE_DIR'], handle)

	img_url = get_image_url(img_src, handle)

	rst = '''Title: %s
Menu exclude: True
Description: %s

.. raw:: html

  <h1>%s</h1>
  
  %s
  
  <img src="%s" alt="%s" />

''' % (
		product['name'],
		product['short_description'],
		product['name'],
		product['description'],
		img_url,
		handle
	)

	write_file(page_path, rst)


# Load products
products_file_path = join(environ['PAGEGEN_SITE_DIR'], 'products.json')
with codecs.open(products_file_path, 'r', encoding='utf-8') as products:
	p = json.load(products)

# Create product directories
create_pagegen_directories(environ['PAGEGEN_SOURCE_DIR'], p)

# Make default image
cropped_images('photo-missing')

# Create default page and pages for each product
for key, product_category in p.iteritems():
	for handle, item in product_category['items'].iteritems():
		cropped_images(handle)

	create_pagegen_default_page(product_category)

	for handle, item in product_category['items'].iteritems():
		page_path = join(environ['PAGEGEN_SOURCE_DIR'], product_category['pagegen_directory_name'], handle)

		create_pagegen_product_pages(page_path, item, handle)
